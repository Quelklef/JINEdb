import { newJine, Store, Index, addStore, addIndex } from 'jine';

// Type to store in DB
type User = {
username: string;
friends: Array<number>;
};

// Let typescript know what our database looks like
interface $$ {
users: Store<User> & {
name: Index<User, string>;
friends: Index<User, string>;
popularity: Index<user, number>;
};
};

// Initialize database
const jine = await newJine<$$>('users');

await jine.upgrade(1, (genuine: boolean, tx: Transaction<$$>) => {
// Add user storage
const users = tx.addStore<User>('users');
// Index by unique username
users.addIndex<string>('name', '.username', { unique: true });
// Index by friend names
users.addIndex<string>('friends', '.friends', { explode: true });
// Index by friend count
users.addIndex<number>(
'popularity',
(user: User) => user.friends.length,
);
});


// Initialize database and open connection
const jcon = jine.newConnection();

// Add users
await jcon.$.users.add({ username: 'billy02'   , friends: ['AverageJoe'] });
await jcon.$.users.add({ username: 'AverageJoe', friends: ['billy02']    });
await jcon.$.users.add({ username: 'l0neRider' , friends: []             });

// billy02 and l0neRider just become friends!
await jcon.transact(tx => {
await tx.$.users.by.name.one('l0neRider').update({ friends: ['billy02'] });
// TODO: implement UniqueQueryExecutor#map
//       probably the whole family of updaters need a small redesign
await tx.$users.by.name.one('billy02').map(old_billy =>
{ ...old_billy, friends: [...old_billy.friends, 'l0neRider'] });
});

// Who's friends with billy02?
const billy02_friends = await jcon.$.users.by.friends.find('billy02');
billy02_friends.map(user => user.name) === ['AverageJoe', 'l0neRider'];

// Anyone without friends?
const lonely = await jcon.$.users.by.popularity.find(0);
lonely.length === 0;  // nope!

// Anyone super popular?
const popular = await jcon.$.users.by.popularity.range({ above: 15 });
poopular.length === 0;  // also nope!

// Close database connection
jcon.close();
```
import { newJine, Store, Index, Transaction } from 'jine';

// What we'll be storing
type Recipe = {
name: string;
servings: number;
url: string;
ingredients: Array<string>;
};

// Let typescript know what our database will looks like
interface $$ {
recipes: Store<Recipe> & {
name: Index<Recipe, string>;
servings: Index<Recipe, number>;
ingredients: Index<Recipe, string>;
ingredient_count: Index<Recipe, number>;
};
}

// Create our database
const jine = await newJine<$$>('recipes');

// Initialize db to version 1
await jine.upgrade(1, (genuine: boolean, tx: Transaction<$$>) => {

// Create a item store for recipes
const recipes = tx.addStore<Recipe>('recipes');

// Track recipes by their name
// Require names to be unique
recipes.addIndex<string>('name', '.name', { unique: true });

// Track recipes by their serving count
recipes.addIndex<number>('servings', '.servings');

// Track recipes by their ingredients
// The flag 'explode: true' means that a recipe where
//  recipe.ingredients = ['milk', 'chocolate']
// will get indexed for 'milk' and 'chocolate' individually
// rather than indexed for the array as a whole
recipes.addIndex<Recipe, string>('ingredients', '.ingredients', { explode: true });

// Track recipes by their ingredient count
recipes.addIndex<Recipe, number>(
'ingredient_count',
(recipe: Recipe) => recipe.ingredients.length,
);

});


// Open a connection to the database
const jcon = jine.newConnection();
```

### Population

```ts
